# Paths 
PathToRaw = '../data/input/samples/'

PathToRefTemp = '../data/temp/reference/'
ReferenceName = config['referenceName']

PathToMitochondria = '../data/temp/mitochondria/'
mitoName = config['mitoName']

PathToGtf = '../data/input/gtf/'
GtfName = config['gtfName']

PathToTemp = '../data/temp/'
PathToOutput = '../data/output/'
PathToEnv = 'environment/env.yml'

StarMode = config['star']
ConsensusMode = config['consensus']


rule index_genome:
    input:
        ancient(PathToRefTemp + f"{ReferenceName}.fasta")
    output:
        bwa_index = PathToRefTemp + f"{ReferenceName}.fasta.bwt",
        fai_index = PathToRefTemp + f"{ReferenceName}.fasta.fai",
        dictionary = PathToRefTemp + f"{ReferenceName}.dict"
    conda:
        PathToEnv
    shell:
        """
        bwa index -a bwtsw {input}

        samtools faidx {input}

        gatk CreateSequenceDictionary -R {input} 
        """


rule index_mitochondria:
    input:
        ancient(PathToMitochondria + f"{mitoName}.fasta")
    output:
        bwa_index = PathToMitochondria + f"{mitoName}.fasta.bwt",
        fai_index = PathToMitochondria + f"{mitoName}.fasta.fai",
        dictionary = PathToMitochondria + f"{mitoName}.dict"
    conda:
        PathToEnv
    shell:
        """
        bwa index -a bwtsw {input}

        samtools faidx {input}
        
        gatk CreateSequenceDictionary -R {input} 
        """


if StarMode:
    rule index_star:
        input:
            reference = ancient(PathToRefTemp + f"{ReferenceName}.fasta"),
            gtf = ancient(PathToGtf + f"{GtfName}.gtf"),
            genomeDir = ancient(PathToTemp + "genomeDir")
        params:
            thread = config['thread']
        output:
            PathToTemp + "genomeDir/SA"
        conda:
            PathToEnv
        shell:
            """
            STAR --runThreadN {params.thread} \
            --runMode genomeGenerate \
            --genomeDir {input.genomeDir} \
            --genomeFastaFiles {input.reference} \
            --sjdbGTFfile {input.gtf} \
            --sjdbOverhang 99 \
            
            mv Log.out {input.genomeDir}
            """
    

    rule mapping_star_fastq:
        input:
            ancient(PathToTemp + "genomeDir/SA"),
            genomeDir = ancient(PathToTemp + "genomeDir"),
            R1 = ancient(PathToRaw + "{sample}_R1.fastq"),
            R2 = ancient(PathToRaw + "{sample}_R2.fastq")
        params:
            thread = config['thread'],
            resultprefix = PathToTemp + "{sample}/{sample}.",
        output:
            PathToTemp + "{sample}/{sample}.bam"
        conda:
            PathToEnv
        shell:
            """
            STAR --runThreadN {params.thread} \
            --genomeDir {input.genomeDir} \
            --readFilesIn {input.R1} {input.R2} \
            --outSAMmapqUnique 255 \
            --outFileNamePrefix {params.resultprefix} \
            --twopassMode Basic \
            --outSAMtype BAM SortedByCoordinate

            mv {params.resultprefix}Aligned.sortedByCoord.out.bam {output}
            """


    rule mapping_star_gz:
        input:
            ancient(PathToTemp + "genomeDir/SA"),
            genomeDir = ancient(PathToTemp + "genomeDir"),
            R1 = ancient(PathToRaw + "{sample}_R1.fastq.gz"),
            R2 = ancient(PathToRaw + "{sample}_R2.fastq.gz")
        params:
            thread = config['thread'],
            resultprefix = PathToTemp + "{sample}/{sample}.",
        output:
            PathToTemp + "{sample}/{sample}.bam"
        conda:
            PathToEnv
        shell:
            """
            STAR --runThreadN {params.thread} \
            --genomeDir {input.genomeDir} \
            --readFilesIn {input.R1} {input.R2} \
            --outFileNamePrefix {params.resultprefix} \
            --outSAMmapqUnique 255 \
            --readFilesCommand gunzip -c \
            --twopassMode Basic \
            --outSAMtype BAM SortedByCoordinate

            mv {params.resultprefix}Aligned.sortedByCoord.out.bam {output}
            """
else:
    rule mapping_bwa_fastq:
        input:
            ancient(PathToRefTemp + f"{ReferenceName}.fasta.fai"),
            reference = ancient(PathToRefTemp + f"{ReferenceName}.fasta"),
            R1 = ancient(PathToRaw + "{sample}_R1.fastq"),
            R2 = ancient(PathToRaw + "{sample}_R2.fastq")
        params:
            thread = config['thread']
        output:
            PathToTemp + "{sample}/{sample}.bam"
        conda:
            PathToEnv
        shell:
            """
            bwa mem -t {params.thread} {input.reference} {input.R1} {input.R2} | samtools view -@ 4 -bh | samtools sort -@ 4 -o {output}
            """


    rule mapping_bwa_gz:
        input:
            ancient(PathToRefTemp + f"{ReferenceName}.fasta.fai"),
            reference = ancient(PathToRefTemp + f"{ReferenceName}.fasta"),
            R1 = ancient(PathToRaw + "{sample}_R1.fastq.gz"),
            R2 = ancient(PathToRaw + "{sample}_R2.fastq.gz")
        params:
            thread = config['thread']
        output:
            PathToTemp + "{sample}/{sample}.bam"
        conda:
            PathToEnv
        shell:
            """
            bwa mem -t {params.thread} {input.reference} {input.R1} {input.R2} | samtools view -@ 4 -bh | samtools sort -@ 4 -o {output}
            """


rule extract_mito:
    input:
        ancient(PathToTemp + "{sample}/{sample}.bam")
    output:
        PathToTemp + "{sample}/{sample}.mito.bam"
    params:
        mito = config['mito_Name']
    conda:
        PathToEnv
    shell:
        """
        samtools index {input}

        samtools view {input} {params.mito} -bh > {output}
        """


rule add_groups:
    input:
        bam = ancient(PathToTemp + "{sample}/{sample}.mito.bam")
    output:
        bam = PathToTemp + "{sample}/{sample}.groups.bam"
    params:
        name = "{sample}"
    conda:
        PathToEnv
    shell:
        "picard AddOrReplaceReadGroups -I {input.bam} -O {output.bam} -RGLB lib.HSmt -RGPL illumina -RGPU NO_GROUP -RGSM {params.name}"


rule sort:
    input:
        ancient(PathToTemp + "{sample}/{sample}.groups.bam")
    output:
        PathToTemp + "{sample}/{sample}.sorted.bam"
    conda:
        PathToEnv
    shell:
        "picard FixMateInformation -I {input} -O {output} -SO coordinate"


rule split_cigar:
    input:
        ancient(PathToMitochondria + f"{mitoName}.fasta.fai"),
        bam = ancient(PathToTemp + "{sample}/{sample}.sorted.bam"),
        reference = ancient(PathToMitochondria + f"{mitoName}.fasta")
    output:
        bam = PathToTemp + "{sample}/{sample}.split.bam"
    conda:
        PathToEnv
    shell:
        "gatk SplitNCigarReads -R {input.reference} -I {input.bam} -O {output.bam}"


if ConsensusMode:
    rule consensus:
        input:
            bam = ancient(PathToTemp + "{sample}/{sample}.split.bam")
        output:
            PathToTemp + "{sample}/{sample}.fasta"
        conda:
            PathToEnv
        shell:
            "samtools consensus -f fasta -a {input.bam} -o {output}"
    

    rule find_haplogroup_consensus:
        input:
            consensus = ancient(PathToTemp + "{sample}/{sample}.fasta"),
            the_dir = ancient(PathToTemp + "{sample}")
        output:
            PathToOutput + "{sample}.txt"
        params:
            keep = config['keep']
        conda:
            PathToEnv
        shell:
            """
            haplogrep classify --in {input.consensus} --out {output} --format fasta

            if [ "{params.keep}" = "False" ] ; then rm -rf {input.the_dir} ; fi
            """

else:
    rule variant_calling:
        input:
            reference = ancient(PathToMitochondria + f"{mitoName}.fasta"),
            bam = ancient(PathToTemp + "{sample}/{sample}.split.bam")
        output:
            PathToTemp + "{sample}/{sample}.vcf"
        params:
            thread = config['thread'],
            mito = config['mito_Name']
        conda:
            PathToEnv
        shell:
            """
            gatk Mutect2 --mitochondria-mode \
            -L {params.mito} \
            --native-pair-hmm-threads {params.thread} \
            -R {input.reference} \
            -I {input.bam} \
            -O {output}
            """


    rule variant_filter:
        input:
            vcf = ancient(PathToTemp + "{sample}/{sample}.vcf"),
            reference = ancient(PathToMitochondria + f"{mitoName}.fasta"),
        output:
            PathToTemp + "{sample}/{sample}.filtered.vcf"
        conda:
            PathToEnv
        shell:
            """
            gatk FilterMutectCalls --mitochondria-mode \
            --min-allele-fraction 0.2 \
            -R {input.reference} \
            -V {input.vcf} \
            -O {output}
            """


    rule find_haplogroup_vcf:
        input:
            vcf = ancient(PathToTemp + "{sample}/{sample}.filtered.vcf"),
            the_dir = ancient(PathToTemp + "{sample}")
        output:
            PathToOutput + "{sample}.txt"
        params:
            keep = config['keep']
        conda:
            PathToEnv
        shell:
            """
            haplogrep classify --in {input.vcf} --out {output} --format vcf

            if [ "{params.keep}" = "False" ] ; then rm -rf {input.the_dir} ; fi
            """
